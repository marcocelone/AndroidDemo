// Generated by Dagger (https://google.github.io/dagger).
package com.mytaxi.android_demo.dependencies.component;

import com.mytaxi.android_demo.activities.AuthenticatedActivity;
import com.mytaxi.android_demo.activities.AuthenticatedActivity_MembersInjector;
import com.mytaxi.android_demo.activities.AuthenticationActivity;
import com.mytaxi.android_demo.activities.AuthenticationActivity_MembersInjector;
import com.mytaxi.android_demo.activities.MainActivity;
import com.mytaxi.android_demo.activities.MainActivity_MembersInjector;
import com.mytaxi.android_demo.dependencies.module.NetworkModule;
import com.mytaxi.android_demo.dependencies.module.NetworkModule_ProvideHttpClientFactory;
import com.mytaxi.android_demo.dependencies.module.PermissionModule;
import com.mytaxi.android_demo.dependencies.module.PermissionModule_ProvidePermissionHelperFactory;
import com.mytaxi.android_demo.dependencies.module.SharedPrefStorageModule;
import com.mytaxi.android_demo.dependencies.module.SharedPrefStorageModule_ProvideSharedPrefStorageFactory;
import com.mytaxi.android_demo.utils.PermissionHelper;
import com.mytaxi.android_demo.utils.network.HttpClient;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private SharedPrefStorageModule sharedPrefStorageModule;

  private Provider<HttpClient> provideHttpClientProvider;

  private Provider<PermissionHelper> providePermissionHelperProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.sharedPrefStorageModule = builder.sharedPrefStorageModule;
    this.provideHttpClientProvider =
        DoubleCheck.provider(NetworkModule_ProvideHttpClientFactory.create(builder.networkModule));
    this.providePermissionHelperProvider =
        DoubleCheck.provider(
            PermissionModule_ProvidePermissionHelperFactory.create(builder.permissionModule));
  }

  @Override
  public void inject(AuthenticatedActivity activity) {
    injectAuthenticatedActivity(activity);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  @Override
  public void inject(AuthenticationActivity activity) {
    injectAuthenticationActivity(activity);
  }

  private AuthenticatedActivity injectAuthenticatedActivity(AuthenticatedActivity instance) {
    AuthenticatedActivity_MembersInjector.injectMSharedPrefStorage(
        instance,
        SharedPrefStorageModule_ProvideSharedPrefStorageFactory.proxyProvideSharedPrefStorage(
            sharedPrefStorageModule));
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    AuthenticatedActivity_MembersInjector.injectMSharedPrefStorage(
        instance,
        SharedPrefStorageModule_ProvideSharedPrefStorageFactory.proxyProvideSharedPrefStorage(
            sharedPrefStorageModule));
    MainActivity_MembersInjector.injectMHttpClient(instance, provideHttpClientProvider.get());
    MainActivity_MembersInjector.injectMPermissionHelper(
        instance, providePermissionHelperProvider.get());
    MainActivity_MembersInjector.injectMSharedPrefStorage(
        instance,
        SharedPrefStorageModule_ProvideSharedPrefStorageFactory.proxyProvideSharedPrefStorage(
            sharedPrefStorageModule));
    return instance;
  }

  private AuthenticationActivity injectAuthenticationActivity(AuthenticationActivity instance) {
    AuthenticationActivity_MembersInjector.injectMHttpClient(
        instance, provideHttpClientProvider.get());
    AuthenticationActivity_MembersInjector.injectMSharedPrefStorage(
        instance,
        SharedPrefStorageModule_ProvideSharedPrefStorageFactory.proxyProvideSharedPrefStorage(
            sharedPrefStorageModule));
    return instance;
  }

  public static final class Builder {
    private SharedPrefStorageModule sharedPrefStorageModule;

    private NetworkModule networkModule;

    private PermissionModule permissionModule;

    private Builder() {}

    public AppComponent build() {
      if (sharedPrefStorageModule == null) {
        throw new IllegalStateException(
            SharedPrefStorageModule.class.getCanonicalName() + " must be set");
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (permissionModule == null) {
        this.permissionModule = new PermissionModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder permissionModule(PermissionModule permissionModule) {
      this.permissionModule = Preconditions.checkNotNull(permissionModule);
      return this;
    }

    public Builder sharedPrefStorageModule(SharedPrefStorageModule sharedPrefStorageModule) {
      this.sharedPrefStorageModule = Preconditions.checkNotNull(sharedPrefStorageModule);
      return this;
    }
  }
}
